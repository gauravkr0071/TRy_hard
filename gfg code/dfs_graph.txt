#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class Graph
{
    int V;
    list<int>* adj;
    
    public:
    Graph(int V);
    void addedge(int v, int w);
    
    void DFS(int);
    void dfsutil(int , bool visited[]);
};
Graph:: Graph(int V)
{
    this->V=V;
    adj= new list<int>[V];
    
}
void Graph::addedge(int v, int w)
{
    adj[v].push_back(w);
    
}

void Graph::dfsutil(int v,bool visited[])
{
    visited[v]=true;
    cout<<v<<" ";
    for(auto it=adj[v].begin();it!=adj[v].end();it++)
       {
           if(!visited[*it])
              dfsutil(*it,visited);
       }
    
}

void Graph:: DFS (int x)
{
    bool visited[V];
    for(int i =0; i<V;i++)
         visited[i]=false;
    
    dfsutil(x,visited);     
}







int main()
{
  Graph g(4);
  g.addedge(0,1);
  g.addedge(0,2);
  g.addedge(1,2);
  g.addedge(2,0);
  g.addedge(2,3);
  g.addedge(3,3);
  
  g.DFS(2);
  return 0;
  
  
}


